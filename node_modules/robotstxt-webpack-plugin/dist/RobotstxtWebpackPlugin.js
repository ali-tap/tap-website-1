"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeify = require("nodeify");

var _nodeify2 = _interopRequireDefault(_nodeify);

var _generateRobotstxt = require("generate-robotstxt");

var _generateRobotstxt2 = _interopRequireDefault(_generateRobotstxt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RobotstxtWebpackPlugin = function () {
  function RobotstxtWebpackPlugin() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RobotstxtWebpackPlugin);

    this.options = Object.assign({
      filePath: "robots.txt"
    }, options);
  }

  _createClass(RobotstxtWebpackPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      var generateFn = function generateFn(compilation, callback) {
        _this.generate(compilation, callback);
      };

      if (compiler.hooks) {
        var plugin = { name: "RobotstxtPlugin" };

        compiler.hooks.emit.tapAsync(plugin, generateFn);
      } else {
        compiler.plugin("emit", generateFn);
      }
    }
  }, {
    key: "generate",
    value: function generate(compilation, callback) {
      var _this2 = this;

      return (0, _nodeify2.default)((0, _generateRobotstxt2.default)(this.options).then(function (contents) {
        compilation.assets[_this2.options.filePath] = {
          size() {
            return Buffer.byteLength(this.source(), "utf8");
          },
          source() {
            return contents;
          }
        };

        return contents;
      }), function (error) {
        if (error) {
          compilation.errors.push(error);
        }

        return callback();
      });
    }
  }]);

  return RobotstxtWebpackPlugin;
}();

exports.default = RobotstxtWebpackPlugin;
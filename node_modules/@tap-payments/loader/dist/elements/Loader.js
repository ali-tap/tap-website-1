'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactLottie = require('../assets/react-lottie');

var _reactLottie2 = _interopRequireDefault(_reactLottie);

var _data = require('../assets/data.json');

var animationData = _interopRequireWildcard(_data);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import Lottie from 'react-lottie';

// the original library is imported locally, in the assets folder. Its not modified, the library from npm is usable also.

var Loader = function (_Component) {
  _inherits(Loader, _Component);

  function Loader(props) {
    _classCallCheck(this, Loader);

    var _this = _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));

    _this.state = {
      isAnimating: false,
      stopRequested: false,
      showSecondMotion: false

    };
    _this.stopAnimation = _this.stopAnimation.bind(_this);
    _this.startAnimation = _this.startAnimation.bind(_this);
    _this.completeIndicator = _this.completeIndicator.bind(_this);
    return _this;
  }

  _createClass(Loader, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.toggleAnimation) {
        this.startAnimation();
      } else {
        this.stopAnimation();
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.playerOptions = {
        loop: true,
        autoplay: false,
        animationData: this.props.animationData,
        rendererSettings: {
          preserveAspectRatio: 'xMidYMid slice'
        }
        //check for second ending motion
      };if (this.props.secondData) {
        this.secondPlayerOptions = {
          loop: false,
          autoplay: false,
          animationData: this.props.secondData,
          rendererSettings: {
            preserveAspectRatio: 'xMidYMid slice'
          }
        };
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      // update src file if changed
      this.playerOptions.animationData = this.props.animationData;
      if (this.props.secondAnimationData) {
        this.secondPlayerOptions.animationData = this.props.secondData;
      }

      // toggle the animation
      if (prevProps.toggleAnimation == this.props.toggleAnimation) {
        return;
      } else {
        if (this.props.toggleAnimation) {
          this.startAnimation();
        } else {
          this.stopAnimation();
        }
      }
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation() {
      // console.log('stopAnimation');
      this.setState({ stopRequested: true });
    }
  }, {
    key: 'startAnimation',
    value: function startAnimation() {
      // console.log('startAnimation');
      this.setState({ stopRequested: false });
      if (this.state.isAnimating) {
        return;
      } else {
        this.setState({ isAnimating: true });
      }
    }
    //this function is triggered by the lottie component, it is triggered at the end of each loop.

  }, {
    key: 'completeIndicator',
    value: function completeIndicator() {
      // console.log('the animation completed:')
      if (this.state.stopRequested) {
        this.setState({ isAnimating: false });
        //check if there is another ending secondAnimationDuration

        if (this.props.secondData) {
          this.setState({ showSecondMotion: true });
        }
      }
      if (this.props.completeIndicator) {
        this.props.completeIndicator();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var s = this.state;
      var p = this.props;
      //check for the second animation trigger: it shows the first original loader then it shows the ending animation
      if (!s.showSecondMotion || s.isAnimating) {
        return _react2.default.createElement(_reactLottie2.default, {
          options: this.playerOptions,
          speed: p.dataDuration / parseFloat(p.duration),
          isPaused: !s.isAnimating,
          isStopped: !s.isAnimating,
          isClickToPauseDisabled: true,
          eventListeners: [{
            eventName: 'loopComplete',
            callback: function callback() {
              return _this2.completeIndicator();
            }
          }]
        });
      } else {
        return _react2.default.createElement(_reactLottie2.default, {
          options: this.secondPlayerOptions,
          speed: p.secondDataDuration / parseFloat(p.secondDuration),
          isClickToPauseDisabled: true,
          eventListeners: [{
            eventName: 'loopComplete',
            callback: function callback() {
              return _this2.secondCompleteIndicator();
            }
          }]
        });
      }
    }
  }]);

  return Loader;
}(_react.Component);

Loader.defaultProps = {
  toggleAnimation: false,
  duration: 10.0,
  dataDuration: 10.0,
  animationData: animationData,
  completeIndicator: null,
  secondData: null,
  secondDuration: 10.0,
  secondDataDuration: 10.0
};

exports.default = Loader;